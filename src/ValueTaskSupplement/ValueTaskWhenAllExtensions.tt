<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.Threading.Tasks;
using System.Runtime.CompilerServices;
using System.Collections.Generic;

namespace ValueTaskSupplement
{
    public static class ValueTaskWhenAllExtensions
    {
        public static ValueTaskAwaiter<T[]> GetAwaiter<T>(this IEnumerable<ValueTask<T>> tasks)
        {
            return ValueTaskEx.WhenAll(tasks).GetAwaiter();
        }
<# for(var i = 1; i <= 15; i++) { 
    var range = Enumerable.Range(0, i + 1);
    var t = string.Join(", ", range.Select(x => "T" + x));
    var args = string.Join(", ", range.Select(x => $"ValueTask<T{x}> task{x}"));
    var itemx = string.Join(", ", range.Select(x => $"tasks.Item{x + 1}"));
#>

        public static ValueTaskAwaiter<(<#= t #>)> GetAwaiter<<#= t #>>(this (<#= args #>) tasks)
        {
            return ValueTaskEx.WhenAll(<#= itemx #>).GetAwaiter();
        }
<# }#>
    }
}